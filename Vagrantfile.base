# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.
  config.vm.hostname = "vagrant-core"

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "precise32"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "http://files.vagrantup.com/precise32.box"

  # Assign this VM to a host-only network IP, allowing you to access it
  # via the IP. Host-only networks can talk to the host machine as well as
  # any other machines on the same network, but cannot be accessed (through this
  # network interface) by any external networks.
  config.vm.network :private_network, ip: "192.168.50.20"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "./workspace", "/opt/vboxsf/workspace"

  # Uncomment to share folder through NFS
  #config.vm.synced_folder "./workspace", "/opt/nfs/workspace", :nfs => true
  ## http://stackoverflow.com/a/23842244
  #config.bindfs.bind_folder "/opt/nfs/workspace", "/opt/workspace",
  #    :owner => "vagrant",
  #    :group => "vagrant",
  #    :'create-as-user' => true,
  #    :perms => "0644,a+X",
  #    :'create-with-perms' => "0644,a+X"
  #    #:perms => "u=rwx:g=rwx:o=rwx",
  #    #:'create-with-perms' => "u=rwx:g=rwx:o=rwx",
  #    #:'chown-ignore' => true,
  #    #:'chgrp-ignore' => true,
  #    #:'chmod-ignore' => true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:

  #config.vm.provider :virtualbox do |vb|
  #  # Don't boot with headless mode
  #  # vb.gui = true
  #  # http://docs.vagrantup.com/v2/providers/configuration.html
  #  vb.customize ["modifyvm", :id, "--memory", "1024"]
  #  # http://stackoverflow.com/questions/13716012/vagrant-shared-folder-symlinks
  #  # http://ahtik.com/blog/2012/08/16/fixing-your-virtualbox-shared-folder-symlink-error/
  #  vb.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/code_root", "1"]
  #  # http://serverfault.com/a/595010
  #  vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  #  vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
  #end

  # The path to the Berksfile to use with Vagrant Berkshelf
  # config.berkshelf.berksfile_path = "./Berksfile"

  # Enabling the Berkshelf plugin. To enable this globally, add this configuration
  # option to your ~/.vagrant.d/Vagrantfile file
  config.berkshelf.enabled = true

  # Set the version of Chef to be installed in the guest
  config.omnibus.chef_version = "11.14.2"

  config.vm.provision :chef_solo do |chef|
    # Uncomment to debug Chef Cookbooks
    #chef.log_level = 'debug'
    #chef.verbose_logging = true
    chef.roles_path = "chef/roles"
    chef.add_role "core"
  end

end
